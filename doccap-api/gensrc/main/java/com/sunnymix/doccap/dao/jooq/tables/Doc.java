/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.doccap.dao.jooq.tables;


import com.sunnymix.doccap.dao.jooq.Doccap;
import com.sunnymix.doccap.dao.jooq.Keys;
import com.sunnymix.doccap.dao.jooq.tables.records.DocRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doc extends TableImpl<DocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>doccap.doc</code>
     */
    public static final Doc DOC = new Doc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocRecord> getRecordType() {
        return DocRecord.class;
    }

    /**
     * The column <code>doccap.doc.id</code>. ID
     */
    public final TableField<DocRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "ID");

    /**
     * The column <code>doccap.doc.title</code>. 标题
     */
    public final TableField<DocRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "标题");

    /**
     * The column <code>doccap.doc.author</code>. 作者
     */
    public final TableField<DocRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "作者");

    private Doc(Name alias, Table<DocRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doc(Name alias, Table<DocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>doccap.doc</code> table reference
     */
    public Doc(String alias) {
        this(DSL.name(alias), DOC);
    }

    /**
     * Create an aliased <code>doccap.doc</code> table reference
     */
    public Doc(Name alias) {
        this(alias, DOC);
    }

    /**
     * Create a <code>doccap.doc</code> table reference
     */
    public Doc() {
        this(DSL.name("doc"), null);
    }

    public <O extends Record> Doc(Table<O> child, ForeignKey<O, DocRecord> key) {
        super(child, key, DOC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Doccap.DOCCAP;
    }

    @Override
    public UniqueKey<DocRecord> getPrimaryKey() {
        return Keys.KEY_DOC_PRIMARY;
    }

    @Override
    public Doc as(String alias) {
        return new Doc(DSL.name(alias), this);
    }

    @Override
    public Doc as(Name alias) {
        return new Doc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doc rename(String name) {
        return new Doc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doc rename(Name name) {
        return new Doc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
