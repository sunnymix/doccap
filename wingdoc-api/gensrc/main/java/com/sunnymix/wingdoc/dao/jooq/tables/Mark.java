/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.wingdoc.dao.jooq.tables;


import com.sunnymix.wingdoc.dao.jooq.Keys;
import com.sunnymix.wingdoc.dao.jooq.Wingdoc;
import com.sunnymix.wingdoc.dao.jooq.tables.records.MarkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mark extends TableImpl<MarkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wingdoc.mark</code>
     */
    public static final Mark MARK = new Mark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkRecord> getRecordType() {
        return MarkRecord.class;
    }

    /**
     * The column <code>wingdoc.mark.id</code>.
     */
    public final TableField<MarkRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>wingdoc.mark.doc_id</code>. 文档ID
     */
    public final TableField<MarkRecord, String> DOC_ID = createField(DSL.name("doc_id"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "文档ID");

    /**
     * The column <code>wingdoc.mark.pin</code>.
     */
    public final TableField<MarkRecord, Integer> PIN = createField(DSL.name("pin"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private Mark(Name alias, Table<MarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mark(Name alias, Table<MarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>wingdoc.mark</code> table reference
     */
    public Mark(String alias) {
        this(DSL.name(alias), MARK);
    }

    /**
     * Create an aliased <code>wingdoc.mark</code> table reference
     */
    public Mark(Name alias) {
        this(alias, MARK);
    }

    /**
     * Create a <code>wingdoc.mark</code> table reference
     */
    public Mark() {
        this(DSL.name("mark"), null);
    }

    public <O extends Record> Mark(Table<O> child, ForeignKey<O, MarkRecord> key) {
        super(child, key, MARK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wingdoc.WINGDOC;
    }

    @Override
    public Identity<MarkRecord, Integer> getIdentity() {
        return (Identity<MarkRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkRecord> getPrimaryKey() {
        return Keys.KEY_MARK_PRIMARY;
    }

    @Override
    public Mark as(String alias) {
        return new Mark(DSL.name(alias), this);
    }

    @Override
    public Mark as(Name alias) {
        return new Mark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mark rename(String name) {
        return new Mark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mark rename(Name name) {
        return new Mark(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
