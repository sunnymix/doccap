/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.doccap.dao.jooq.tables.records;


import com.sunnymix.doccap.dao.jooq.tables.Block;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockRecord extends UpdatableRecordImpl<BlockRecord> implements Record4<String, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>doccap.block.id</code>. ID
     */
    public BlockRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>doccap.block.id</code>. ID
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>doccap.block.doc_id</code>. 文档ID
     */
    public BlockRecord setDocId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>doccap.block.doc_id</code>. 文档ID
     */
    public String getDocId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>doccap.block.source</code>. 内容
     */
    public BlockRecord setSource(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>doccap.block.source</code>. 内容
     */
    public String getSource() {
        return (String) get(2);
    }

    /**
     * Setter for <code>doccap.block.pos</code>. 位置
     */
    public BlockRecord setPos(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>doccap.block.pos</code>. 位置
     */
    public Integer getPos() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Block.BLOCK.ID;
    }

    @Override
    public Field<String> field2() {
        return Block.BLOCK.DOC_ID;
    }

    @Override
    public Field<String> field3() {
        return Block.BLOCK.SOURCE;
    }

    @Override
    public Field<Integer> field4() {
        return Block.BLOCK.POS;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDocId();
    }

    @Override
    public String component3() {
        return getSource();
    }

    @Override
    public Integer component4() {
        return getPos();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDocId();
    }

    @Override
    public String value3() {
        return getSource();
    }

    @Override
    public Integer value4() {
        return getPos();
    }

    @Override
    public BlockRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public BlockRecord value2(String value) {
        setDocId(value);
        return this;
    }

    @Override
    public BlockRecord value3(String value) {
        setSource(value);
        return this;
    }

    @Override
    public BlockRecord value4(Integer value) {
        setPos(value);
        return this;
    }

    @Override
    public BlockRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlockRecord
     */
    public BlockRecord() {
        super(Block.BLOCK);
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    public BlockRecord(String id, String docId, String source, Integer pos) {
        super(Block.BLOCK);

        setId(id);
        setDocId(docId);
        setSource(source);
        setPos(pos);
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    public BlockRecord(com.sunnymix.doccap.dao.jooq.tables.pojos.Block value) {
        super(Block.BLOCK);

        if (value != null) {
            setId(value.getId());
            setDocId(value.getDocId());
            setSource(value.getSource());
            setPos(value.getPos());
        }
    }
}
